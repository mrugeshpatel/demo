package com.jpmc.theater.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDateTime;
import java.time.LocalTime;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jpmc.theater.vo.BookingRequest;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class ShowBookingControllerTest {
	
	@Autowired
	MockMvc mvc;
	
	@Autowired
	WebApplicationContext context;
	
	@Autowired
    private ObjectMapper objectMapper;
	
	LocalDateTime localDateTime = LocalDateTime.now();
	
	@Test
	public void reserve() throws Exception {
		
		BookingRequest request = createRequest();
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.post("/api/v1/theater/reserve")
				.contentType(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(request))).andReturn();
		int status = mvcResult.getResponse().getStatus();
		assertEquals(201, status);
		
		request.setShowStartTime((LocalDateTime.of(localDateTime.toLocalDate(), LocalTime.of(11, 0))));
		mvcResult = mvc.perform(MockMvcRequestBuilders.post("/api/v1/theater/reserve")
				.contentType(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(request))).andReturn();
		status = mvcResult.getResponse().getStatus();
		assertEquals(201, status);
		
		
	}
	
	@Test
	public void reserveText() throws Exception {
		
		BookingRequest request = createRequest();
		MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.post("/api/v1/theater/reservetext")
				.contentType(MediaType.APPLICATION_JSON_VALUE).content(objectMapper.writeValueAsString(request))).andReturn();
		int status = mvcResult.getResponse().getStatus();
		assertEquals(201, status);
	}
	
	private BookingRequest createRequest() {
		
		LocalDateTime.of(localDateTime.toLocalDate(), LocalTime.of(9, 0));
		BookingRequest request = BookingRequest.builder()
				   .customer("Mike")
				   .theater("Regal")
				   .location("South Brunswick")
				   .showStartTime(LocalDateTime.of(localDateTime.toLocalDate(), LocalTime.of(9, 0)))
				   .movie("The Batman")
				   .noOfSeat(3)
				   .build();
		return request;
	}
}
